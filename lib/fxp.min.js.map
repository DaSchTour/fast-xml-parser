{"version":3,"file":"./lib/fxp.min.js","mappings":"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","sources":["webpack://fxp/./node_modules/strnum/strnum.js","webpack://fxp/./src/fxp.js","webpack://fxp/./src/util.js","webpack://fxp/./src/validator.js","webpack://fxp/./src/xmlbuilder/json2xml.js","webpack://fxp/./src/xmlbuilder/orderedJs2Xml.js","webpack://fxp/./src/xmlparser/DocTypeReader.js","webpack://fxp/./src/xmlparser/OptionsBuilder.js","webpack://fxp/./src/xmlparser/OrderedObjParser.js","webpack://fxp/./src/xmlparser/XMLParser.js","webpack://fxp/./src/xmlparser/node2json.js","webpack://fxp/./src/xmlparser/xmlNode.js","webpack://fxp/webpack/bootstrap","webpack://fxp/webpack/startup"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1);\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(867);\n"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","validator","require","XMLParser","XMLBuilder","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","keys","merge","target","a","arrayMode","len","i","getValue","isName","string","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","oneListGroup","Builder","this","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","j2x","buildTextValNode","buildObjectNode","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","_jObj","call","Date","attr","buildAttrPairStr","newval","replaceEntitiesValue","arrLen","listTagVal","listTagAttr","j","item","textValue","Ks","L","closeTag","tagEndExp","piClosingChar","entity","arrToStr","arr","jPath","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","newIdentation","tagStart","attr_to_str","tagValue","endsWith","includes","attStr","tempInd","piTextNodeName","tagText","isStopNode","attrMap","attrVal","lastIndexOf","jArray","readEntityExp","entityName","Error","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","hasBody","comment","_readEntityExp","regx","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","attrs","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","propIndex","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","_ref","docTypeEntities","_ref2","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","child","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","openTagCount","shouldParse","_","String","fromCharCode","OrderedObjParser","prettify","_proto","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","compress","text","compressedObj","newJpath","property","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","XmlNode","_this$child$push","_this$child$push2","_this$child$push3","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}